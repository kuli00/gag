<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Meme;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * MemeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return array
     */
    public function findRandom()
    {

        $entityManager = $this->getEntityManager();
        $rsm = new ResultSetMappingBuilder($entityManager);
        $rsm->addRootEntityFromClassMetadata(Meme::class, 'm');
        $query = $entityManager->createNativeQuery(
            'SELECT meme.*
                FROM meme
                WHERE meme.status = "hot"
                ORDER BY RANDOM() LIMIT 1',
                $rsm
        );
        $meme = $query->getResult();
        return $meme;
    }

    /**
     * @param int $page
     * @param $status
     * @return array
     */
    public function findPage($page = 1, $status)
    {
        $page = $page * 10 - 10;
        $query = $this->createQueryBuilder("m")
            ->where("m.status = :status")
            ->setParameter("status", $status)
            ->orderBy("m.createdAt", "DESC")
            ->getQuery();
        $query->setFirstResult($page);
        $query->setMaxResults(10);
        return $query->getResult();

    }

    /**
     * @param $status
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findMaxPages($status)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT COUNT(m.id) 
                FROM AppBundle:Meme m 
                WHERE m.status = :status"
                )
            ->setParameter("status", $status)
            ->getSingleScalarResult();
    }

    /**
     * @return array
     */
    public function findTop()
    {
        return $this->createQueryBuilder("m")
            ->where("m.status = :status")
            ->setParameter("status", Meme::STATUS_HOT)
            ->orderBy("m.votesRate", "DESC")
            ->setMaxResults(10)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function findWrongStatus()
    {
        $wrongStatus = array(
            'freshToHot' => NULL,
            'freshExpired' => NULL,
            'freshLowRate' => NULL,
        );

        $wrongStatus['freshToHot'] = $this->createQueryBuilder("m")
            ->where("m.votesRate > :hotrate")
            ->setParameter("hotrate", 20)
            ->andWhere("m.status = :status")
            ->setParameter("status", Meme::STATUS_FRESH)
            ->getQuery()
            ->getResult();

        $wrongStatus['freshExpired'] = $this->createQueryBuilder("m")
            ->where("m.votesRate < :hotrate")
            ->setParameter("hotrate", 20)
            ->andWhere("m.createdAt < :datetime")
            ->setParameter("datetime", new \DateTime("-7 days") )
            ->getQuery()
            ->getResult();

        $wrongStatus['freshLowRate'] = $this->createQueryBuilder("m")
            ->where("m.votesRate < :archiverate")
            ->setParameter("archiverate", -10)
            ->getQuery()
            ->getResult();

        return $wrongStatus;




    }
}
